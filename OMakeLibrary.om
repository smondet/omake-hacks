
.PHONY: clean distclean

NATIVE_ENABLED = $(OCAMLOPT_EXISTS)
BYTE_ENABLED = true

.SUBDIRS: .
    echo "Go!"

clean:
  rm -rf _build

distclean: clean
  rm -rf OMakefile.omc OMakeroot.omc .omakedb .omakedb.lock tools/OMakeLibrary.omc

# Build Parameters
USE_OCAMLFIND = true
if $(not $(OCAMLFIND_EXISTS))
  eprintln(This project requires ocamlfind, but it was not found.)
  eprintln(You need to install ocamlfind and run "omake --configure".)
  exit 1

OCAML_LOCAL_LIBS[] =

OCAML_GENERATED_MODULES[] =

public.OCamlPackedLibraryOfDir(libname, directory) =
    mkdir -p _build/$(directory)
    vmount(-l, $(directory), _build/$(directory))
    protected.LIB_FILES[] = $(ls $(directory)/*.ml)
    protected.packname = $(capitalize $(libname))
    protected.targetname = lib-$(libname)
    protected.local_deps = $(file $(addprefix _build/,$(addsuffix .cmi, $(OCAML_LOCAL_LIBS))))
    .PHONY: $(targetname)
    .SUBDIRS: _build/$(directory)
        OCAMLFLAGS += -for-pack $(packname)
        OCAMLINCLUDES += $(dirname $(local_deps))
        %.ml: $(local_deps)
        %.mli: $(local_deps)
        %.cmi: $(local_deps)
        %.cmxa: $(local_deps)
        protected.LIB_MODULES[] =
            $(removesuffix $(removesuffix $(basename $(LIB_FILES))))
            $(OCAML_GENERATED_MODULES)
        protected.LIB_CMOS = $(addsuffix .cmo, $(LIB_MODULES))
        protected.LIB_CMIS = $(addsuffix .cmi, $(LIB_MODULES))
        protected.LIB_CMXS = $(addsuffix .cmx, $(LIB_MODULES))
        protected.LIB_OS = $(addsuffix .o, $(LIB_MODULES))
        echo "LIB $(libname) MODULES: $(LIB_MODULES)"
        echo "$(LIB_CMXS)"
        echo "$(LIB_CMIS)"
        $(libname).cmo $(libname).cmi: $(LIB_CMOS) $(LIB_CMIS)
            ocamlc -pack -o $(libname).cmo $(OCamlLinkSort $(LIB_CMOS))
        $(libname).cmx $(libname).o: $(LIB_CMXS) $(LIB_OS) $(LIB_CMIS)
            ocamlopt -pack -o $(libname).cmx $(OCamlLinkSort $(LIB_CMXS))
        $(libname).cmxs: $(libname).cmx
            ocamlopt -shared -o $@ $(libname).cmx
        $(targetname): $(OCamlLibrary $(libname), $(libname)) $(libname).cmxs $(libname).cma
        META:  :value: $(VERSION) :value: $(DESCRIPTION) :value: $(OCAMLPACKS) :value: $(OCAML_LOCAL_LIBS)
            echo "description = \"$(DESCRIPTION)\"" > $@
            echo "version = \"$(VERSION)\"" >> $@
            echo "requires = \"$(OCAMLPACKS) $(removesuffix $(basename $(local_deps)))\"" >> $@
            echo "archive(byte) = \"$(libname).cma\"" >> $@
            echo "archive(native) = \"$(libname).cmxa\"" >> $@
            echo "archive(native,plugin) = \"$(libname).cmxs\"" >> $@
        .PHONY: install-$(targetname) uninstall-$(targetname)
        install-$(targetname): META $(targetname)
            ocamlfind install $(libname) META $(libname).cm[aix] $(libname).cmx[as] $(libname).a
        uninstall-$(targetname):
            ocamlfind remove $(libname)
    return $(targetname)

public.OCamlProgramOfDirectory(appname, directory) =
    mkdir -p _build/$(directory)
    vmount(-l, $(directory), _build/$(directory))
    protected.APP_FILES[] = $(ls $(directory))
    protected.targetname = app-$(appname)
    protected.local_includes = $(file $(addprefix _build/,$(addsuffix .cmi, $(OCAML_LOCAL_LIBS))))
    protected.local_deps_suffix = $(if $(NATIVE_ENABLED), .o,  .cmo)
    protected.local_deps = $(file $(addprefix _build/,$(addsuffix .cmi, $(OCAML_LOCAL_LIBS)))) \
        $(file $(addprefix _build/,$(addsuffix $(local_deps_suffix), $(OCAML_LOCAL_LIBS)))) 
    .PHONY: $(targetname)
    protected.best_app = $(if $(NATIVE_ENABLED), $(appname).opt,  $(appname).run)
    $(appname): _build/$(directory)/$(best_app)
        cp  _build/$(directory)/$(best_app) $(appname)
    $(targetname): $(appname)
    .SUBDIRS: _build/$(directory)
        OCAMLINCLUDES += $(dirname $(local_includes)) # $(set ..) deduplicates but sorts
        OCAML_LIBS +=  $(removesuffix $(local_includes))
        %.ml: $(local_deps)
        %.mli: $(local_deps)
        %.cmi: $(local_deps)
        %.cmx: $(local_deps)
        %.opt: $(local_deps)
        $(best_app): $(local_deps)
        protected.APP_MODULES[] =
            $(removesuffix $(removesuffix $(basename $(APP_FILES))))
            $(OCAML_GENERATED_MODULES)
        echo "APP $(appname) MODULES: $(APP_MODULES)"
        echo "APP $(appname) local_deps: $(local_deps)"
        OCamlProgram($(appname), $(APP_MODULES))
        .PHONY: install-$(targetname) uninstall-$(targetname)
        install-$(targetname): $(best_app)
            cp $(best_app) $(BINDIR)/$(appname)
        uninstall-$(targetname):
            rm -f $(BINDIR)/$(appname)
    return $(targetname)

public.OCamlProgramOfFile(appname, path) =
    protected.src_directory = $(dirname $(path))
    protected.dst_directory = $(appname)
    mkdir -p _build/$(dst_directory)
    vmount(-l, $(src_directory), _build/$(dst_directory))
    protected.targetname = app-$(appname)
    protected.local_deps = $(file $(addprefix _build/,$(addsuffix .cmi, $(OCAML_LOCAL_LIBS))))
    .PHONY: $(targetname) build-$(targetname)
    protected.best_app = $(if $(NATIVE_ENABLED), $(appname).opt,  $(appname).run)
    $(appname): _build/$(dst_directory)/$(best_app)
        cp  _build/$(dst_directory)/$(best_app) $(appname)
    $(targetname): $(appname)
    .SUBDIRS: _build/$(dst_directory)
        OCAMLINCLUDES[] += $(addprefix ./, $(dirname $(local_deps)))
        PREFIXED_OCAMLINCLUDES = $(mapprefix -I, $(OCAMLINCLUDES))
        OCAML_LIBS[] += $(addprefix ./, $(removesuffix $(local_deps)))
        $(basename $(path)): $(local_deps)
        protected.APP_MODULES[] = $(removesuffix $(basename $(path)))
        build-$(targetname): $(OCamlProgram $(appname), $(APP_MODULES))
        .PHONY: install-$(targetname) uninstall-$(targetname)
        install-$(targetname): $(best_app)
            cp $(best_app) $(BINDIR)/$(appname)
        uninstall-$(targetname):
            rm -f $(BINDIR)/$(appname)
    return $(targetname)

public.DotMerlin(topdir, packages) =
    .merlin:
        rm -f .merlin
        foreach(d => ..., $(find $(topdir) -d {}))
            echo "S $(d)" >> $@
            echo "B _build/$(d)" >> $@
        foreach(m => ..., $(packages))
            echo "PKG $(m)" >> $@

public.DotOCamlinit(dirs, packages, to_load) =
    .ocamlinit:
        rm -f $@
        echo "#use \"topfind\"" >> $@
        echo "#thread" >> $@
        foreach(d => ..., $(dirs))
            echo "#directory \"_build/$(d)\"" >> $@
        foreach(m => ..., $(packages))
            echo "#require \"$(m)\"" >> $@
        foreach(m => ..., $(to_load))
            echo "#load_rec \"$(m).cma\"" >> $@
